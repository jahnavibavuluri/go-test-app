apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: release-readiness-sensor
  namespace: argo-events
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: git-dep
      eventSourceName: git-event-source
      eventName: release-readiness
  triggers:
    - template:
        name: trigger-release-readiness-workflow
        argoWorkflow:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: git-triggered-release-readiness-workflow-
              spec:
                entrypoint: rr-checks
                volumes:
                  - name: ssh-key-volume
                    secret:
                      secretName: github-ssh-key
                      items:
                        - key: ssh-privatekey
                          path: id_ed25519
                templates:
                  - name: rr-checks
                    retryStrategy:
                      limit: "2"
                    steps:
                      - - name: rr-check-1
                          template: rr-check
                          arguments:
                            parameters:
                              - name: url
                                value: "https://ceda-144-212-5-9.ngrok-free.app/test"
                        - name: rr-check-2
                          template: rr-check
                          arguments:
                            parameters:
                              - name: url
                                value: "https://github.com"
                      - - name: argocd-sync-to-jlp-cluster
                          template: argo-cd-sync
                      - - name: argo-rollout-status-check-jlp-cluster
                          template: argo-rollout-status
                      - - name: update-image-to-prod
                          template: update-image
                      - - name: argocd-sync-to-prod-cluster
                          template: argo-cd-sync-prod
                      - - name: argo-rollout-status-check-prod-cluster
                          template: argo-rollout-status-check-prod-cluster
                  - name: rr-check
                    inputs:
                      parameters:
                        - name: url
                    container:
                      image: curlimages/curl
                      command: ["/bin/sh", "-c"]
                      args: ["curl -s -o /dev/null -w \"%{http_code}\" {{inputs.parameters.url}} | grep 200"]
                  - name: argo-cd-sync
                    container:
                      image: argoproj/argocd:latest
                      command: ["/bin/sh", "-c"]
                      args:
                        - |
                          argocd login argocd-server.argocd.svc --username admin --password dXZIZ5isRj5IIPcJ --insecure
                          argocd app sync toolboxes-jlp-cluster
                  - name: argo-rollout-status
                    container:
                      image: jbavuluri/argo-rollouts-custom-image:latest
                      command: ["/bin/sh", "-c"]
                      args:
                        - |
                          echo "Waiting for the rollout to start progressing..."
                          until kubectl argo rollouts status go-test-app-jlp --namespace default | grep "Progressing"; do
                            sleep 5
                          done
                          echo "Rollout is progressing..."

                          echo "Waiting for rollout to become healthy..."
                          until kubectl argo rollouts status go-test-app-jlp --namespace default | grep "Healthy"; do
                            sleep 5
                          done
                          echo "Rollout is healthy"
                  - name: update-image
                    script:
                      image: alpine/git
                      command: ["/bin/sh"]
                      volumeMounts:
                        - name: ssh-key-volume
                          mountPath: /root/.ssh
                      source: |
                        set -e
                        # Copy the SSH key to a writable location with the correct permissions
                        cp /root/.ssh/id_ed25519 /tmp/id_ed25519
                        chmod 600 /tmp/id_ed25519

                        # Optionally add GitHub to known_hosts to avoid host key verification
                        ssh-keyscan -H github.com >> /tmp/known_hosts

                        # Set the GIT_SSH_COMMAND once for all Git operations
                        export GIT_SSH_COMMAND="ssh -i /tmp/id_ed25519 -o UserKnownHostsFile=/tmp/known_hosts -o StrictHostKeyChecking=no"

                        echo "Cloning the Git repository..."
                        # Clone the repository
                        git clone git@github.com:jahnavibavuluri/go-test-app.git

                        cd go-test-app

                        echo "Extracting the image from jlp-cluster/rollout.yaml..."
                        # Extract the image from jlp-cluster/rollout.yaml
                        IMAGE=$(grep 'image:' jlp-cluster/rollout.yaml | awk '{print $2}')

                        echo "Updating the image in prod-cluster/rollout.yaml..."
                        # Update the image in prod-cluster/rollout.yaml
                        sed -i "s|image: .*|image: $IMAGE|" prod-cluster/rollout.yaml

                        echo "Configuring Git user..."
                        # Commit and push changes
                        git config --global user.email "jbavuluri@gmail.com"
                        git config --global user.name "jahnavibavuluri"

                        echo "Committing changes..."
                        git add prod-cluster/rollout.yaml
                        git commit -m "Update image in prod-cluster/rollout.yaml to $IMAGE"

                        echo "Pushing changes to repository"
                        git push origin main

                        echo "Workflow completed successfully!"
                  - name: argo-cd-sync-prod
                    container:
                      image: argoproj/argocd:latest
                      command: ["/bin/sh", "-c"]
                      args:
                        - |
                          argocd login argocd-server.argocd.svc --username admin --password dXZIZ5isRj5IIPcJ --insecure
                          argocd app sync toolboxes-prod-cluster
                  - name: argo-rollout-status-check-prod-cluster
                    container:
                      image: jbavuluri/argo-rollouts-custom-image:latest
                      command: ["/bin/sh", "-c"]
                      args:
                        - |
                          echo "Waiting for the rollout to start progressing..."
                          until kubectl argo rollouts status go-test-app --namespace default | grep "Progressing"; do
                            sleep 5
                          done
                          echo "Rollout is progressing..."

                          echo "Waiting for rollout to become healthy..."
                          until kubectl argo rollouts status go-test-app --namespace default | grep "Healthy"; do
                            sleep 5
                          done
                          echo "Rollout is healthy"
